#include <iostream>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <string>
#include <rapidjson/document.h>
#include <rapidjson/writer.h>
#include <rapidjson/stringbuffer.h>

namespace fs = std::filesystem;

void processJsonFiles(const std::string& inputFolder, const std::string& outputFilePath) {
    // Crear el archivo de salida .hpp
    std::ofstream outputFile(outputFilePath);
    if (!outputFile.is_open()) {
        std::cerr << "No se pudo crear el archivo de salida: " << outputFilePath << std::endl;
        return;
    }

    // Escribir el encabezado del archivo .hpp
    outputFile << "#ifndef JSON_DATA_HPP\n";
    outputFile << "#define JSON_DATA_HPP\n\n";
    outputFile << "#include <string>\n\n";
    outputFile << "namespace JSONData {\n\n";

    // Iterar sobre los archivos JSON en la carpeta
    for (const auto& entry : fs::directory_iterator(inputFolder)) {
        if (entry.is_regular_file() && entry.path().extension() == ".json") {
            std::string inputFilePath = entry.path().string();
            std::string jsonName = entry.path().stem().string(); // Nombre del archivo sin extensión

            // Leer el contenido del archivo JSON
            std::ifstream inputFile(inputFilePath);
            if (!inputFile.is_open()) {
                std::cerr << "No se pudo abrir el archivo: " << inputFilePath << std::endl;
                continue;
            }

            std::ostringstream oss;
            oss << inputFile.rdbuf();
            std::string jsonContent = oss.str();

            // Parsear y compactar el JSON con RapidJSON
            rapidjson::Document document;
            if (document.Parse(jsonContent.c_str()).HasParseError()) {
                std::cerr << "Error al parsear el JSON en el archivo: " << inputFilePath << std::endl;
                continue;
            }


            rapidjson::StringBuffer buffer;
            rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
            document.Accept(writer);

            // Escribir el JSON compactado como una constante de string en el archivo .hpp
            outputFile << "    const std::string " << jsonName << " = R\"(" << buffer.GetString() << ")\";\n";
        }
    }

    // Escribir el pie del archivo .hpp
    outputFile << "\n} // namespace JSONData\n";
    outputFile << "#endif // JSON_DATA_HPP\n";

    std::cout << "Archivo generado: " << outputFilePath << std::endl;
}

int main() {
    // Carpeta de entrada con los archivos JSON
    const std::string inputFolder = "../Tarea_XXXX"; // Cambiar a tu carpeta de entrada
    const std::string outputFilePath = "./AutoGenerated_JSONData.hpp"; // Archivo de salida

    // Procesar los archivos JSON y generar el archivo .hpp
    processJsonFiles(inputFolder, outputFilePath);

    return 0;
}
